# https://github.com/CheMax-sudo/python_homework/blob/624fd1447a786a479c611d86a8ed2d9f3aa1deca/work4.py

# Задание 1. Три списка
# Даны три списка.
# array_1 = [1, 5, 10, 20, 40, 80, 100]
# array_2 = [6, 7, 20, 80, 100]
# array_3 = [3, 4, 15, 20, 30, 70, 80, 120]
# Нужно выполнить две задачи:
# 1.  найти элементы, которые есть в каждом списке;
# 2.  найти элементы из первого списка, которых нет во втором и третьем списках.
# Каждую задачу нужно выполнить двумя способами:
# 1.  без использования множеств; 2.  с использованием множеств.
# Пример выполнения на других данных: array_1 = [1, 2, 3, 4]
# array_2 = [2, 4]
# array_3 = [2, 3]
# Вывод:
# Задача 1:
# Решение без множеств: 2 Решение с множествами: 2 Задача 2:
# Решение без множеств: 1 Решение с множествами: 1

# Решение с использованием множеств.

array_1 = [1, 5, 10, 20, 40, 80, 100]
array_2 = [6, 7, 20, 80, 100]
array_3 = [3, 4, 15, 20, 30, 70, 80, 120]

set_arr1 = set(array_1)
set_arr2 = set(array_2)
set_arr3 = set(array_3)

result1 = list(sorted(set_arr1 & set_arr2 & set_arr3)) # Находим элементы, которые есть в каждом списке
result2 = list(sorted(set_arr1 - set_arr2 - set_arr3)) # Находим элементы из первого списка, которых нет во втором и третьем списках.

result1 = ' '.join(map(str, result1))
result2 = ' '.join(map(str, result2))

print(f'Решение с множествами: \nЗадача 1. Ответ: {result1} ')
print(f'Задача 2. Ответ: {result2} ')

# Решение без использования множеств.

result3 = []
    
for num in array_1:
    if num in array_2 and num in array_3:
        result3.append(num)

result4 = []

for num in array_1:
    if num not in array_2 and num not in array_3:
        result4.append(num)

print(f'Решение без исользования множеств: \nЗадача 1. Ответ:',*result3)
print("Задача 2. Ответ:",*result4)

# Задача 2. Палиндром
# Пользователь вводит строку. Необходимо написать программу, которая определяет, 
# существует ли у этой строки перестановка, при которой она станет палиндромом. 
# Затем она должна выводить соответствующее сообщение.
# Пример 1
# Введите строку: aab
# Можно сделать палиндромом
# Пример 2
# Введите строку: aabc
# Нельзя сделать палиндромом  

str_polindrom = input("Введите строку: ")
def my_poly(string):
    res = {}
    for i in str_polindrom:
        res[i] = res.get(i, 0) + 1

    odd_count = 0

    for i_value in res.values():
        if i_value % 2 != 0:
            odd_count += 1
    return odd_count <= 1
    
print(my_poly(str_polindrom))


str_polindrom = input("Введите строку: ")

res = {}
for i in str_polindrom:
    res[i] = res.get(i, 0) + 1

odd_count = 0

for i_value in res.values():
    if i_value % 2 != 0:
        odd_count += 1
        
if odd_count <= 1:
    print("Можно сделать палиндромом")
else:
    print("Нельзя сделать палиндромом")
    
    
# Задача 3. Словарь синонимов
# Одна библиотека поручила вам написать программу для оцифровки словарей синонимов. На вход в программу подаётся N пар слов. Каждое слово является синонимом для своего парного слова.
# Реализуйте код, который составляет словарь синонимов (все слова в словаре различны), затем запрашивает у пользователя слово и выводит на экран его синоним. Обеспечьте контроль ввода: если такого слова нет, выведите ошибку и запросите слово ещё раз. При этом проверка не должна зависеть от регистра символов.
# Пример
# Введите количество пар слов: 3
# Первая пара: Привет — Здравствуйте
# Вторая пара: Печально — Грустно
# Третья пара: Весело — Радостно
# Введите слово: интересно
# Такого слова в словаре нет.
# Введите слово: здравствуйте
# Синоним: Привет

n = int(input("Введите количество пар слов: "))
dict_sin = []
for n in range(n):
    in_para = input("Введите пару: ").lower().split()
    dict_sin.append(in_para)

x = True
while x:
    in_str = input("Введите слово: ")
   
    for i in dict_sin:
        if in_str in i:
            if i[0] == in_str:
                print("Синоним:",i[1])
                x = False
                break
            else:
                print("Синоним:",i[0])
                x = False
                break
    else:
        print("Ошибка ввода, введите слово ещё раз!")

# Задача 4. Гистограмма частоты
# Создайте программу для лингвистов, которая будет инвертировать полученный словарь. То есть в качестве ключа будет частота, а в качестве значения — список символов с этой частотой. Вам нужно реаллизовать:
# 1.  получить текст и создать из него оригинальный словарь частот;
# 2.  создать новый словарь и заполнить его данными из оригинального словаря частот, используя количество повторов в качестве ключей, а буквы — в качестве значений, добавляя их в список для хранения.

in_str = input("Введите строку: ")
res = {}

for i in in_str:
    res[i] = res.get(i, 0) + 1

inv = dict() # Инициализируем пустой словарь для инвертированных данных
for key in res:
    val = res[key]
# Если частота еще не встречалась, создаем новый список
    if val not in inv:
        inv[val] = [key]
    else:
# Если частота уже есть в словаре, добавляем символ в существующий список
        inv[val].append(key)
print(f"Оригинальный словарь частот: \n", res)

print('Инвертированный словарь частот:')
for i_sym in sorted(inv.keys()):
    print(i_sym, ':', inv[i_sym])
