# Задание 1: Видеокарты
# В базе магазина электроники есть список видеокарт компании NVIDIA разных
# поколений. Вместо полных названий хранятся только числа, которые обозначают
# модель и поколение видеокарты. Недавно компания выпустила новую линейку
# видеокарт. Самые старшие поколения разобрали за пару дней.
# Напишите программу, которая удаляет наибольшие элементы из списка видеокарт.
# Пример:
# Количество видеокарт: 5
# Видеокарта 1: 3070
# Видеокарта 2: 2060
# Видеокарта 3: 3090
# Видеокарта 4: 3070
# Видеокарта 5: 3090
# Старый список видеокарт: [ 3070 2060 3090 3070 3090 ]
# Новый список видеокарт: [ 3070 2060 3070 ]

list_1 = [3070, 2060, 3090, 3070, 3090]

max_model = 0
for i in list_1:
    if max_model < i:
        max_model = i
print(f'Старый список видеокарт: {list_1}')
for i in range(-len(list_1), 0):
     if list_1[i] == max_model:        
       list_1.pop(i)
       list_new = list_1
print(f'Новый список видеокарт: {list_new}')

# Задача 2. Кино
# Илья зашёл на любительский киносайт, на котором пользователи оставляют
# рецензии на фильмы. Их список:
# films = [‘Крепкий орешек’, ‘Назад в будущее’, ‘Таксист’, ‘Леон’, ‘Богемская
# рапсодия’, ‘Город грехов’, ‘Мементо’, ‘Отступники’, ‘Деревня’]
# Илья на сайте в первый раз. Он хочет зарегистрироваться и сразу добавить
# часть фильмов в список любимых, чтобы позже прочитать рецензии на них.
# Напишите программу, в которой пользователь вводит фильм. Если кинокартина
# есть в перечне, то добавляется в список любимых. Если её нет, то выводится
# ошибка. В конце выведите весь список любимых фильмов.
# Пример:
# Сколько фильмов хотите добавить? 3
# Введите название фильма: Леон
# Введите название фильма: Безумный Макс
# Ошибка: фильма Безумный Макс у нас нет :(
# Введите название фильма: Мементо
# Ваш список любимых фильмов: Леон, Мементо

# Мой вариант решения!
  
films = ["Крепкий орешек", "Назад в будущее", "Таксист", "Леон", "Богемская рапсодия", "Город грехов", "Мементо", "Отступники", "Деревня"]
list_favorite = []
result = ""
size = 0
n = int(input("Сколько фильмов хотите добавить?: "))

while size != n:
  name_films = input("Введите название фильма: ")
  for i in films:
    if name_films == i:
      list_favorite.append(i)
      size += 1
      break
  else:
    print(f'Ошибка: фильма {name_films} у нас нет :(')
              
print(", ".join(list_favorite))

# Вариант из эталонного решения. 
# Нет принта после ввода данных. 
# При вводе несуществующей строки, выходит из программы.

films = ['Крепкий орешек', 'Назад в будущее', 'Таксист', 'Леон', 'Богемская рапсодия', 'Город грехов', 'Мементо', 'Отступники', 'Деревня']
my_list = []
movies_count = int(input('Сколько фильмов хотите добавить? '))
for _ in range(movies_count):
    movie = input('Введите название фильма: ')
    if movie in films:
        my_list.append(movie)
    else:
        print(f'Ошибка: фильма {movie} у нас нет :(')
print(f'\nВаш список любимых фильмов: {my_list}')

# Задача 3. Сортировка
# Дан список из N чисел. Напишите программу, которая сортирует элементы
# списка по возрастанию и выводит их на экран. Дополнительный список
# использовать нельзя.
# Также нельзя использовать готовые функции sorted/min/max и метод sort
# Постарайтесь придумать и написать как можно более эффективный алгоритм
# сортировки.

list1 = [4, 3, 1, 8, 4, 2, 9, 5]
        
n = len(list1)
tmp = 0
j = 1
for i in range(n):
    for j in range(n-i):
        if list1[i]>list1[n-j-1]:
            tmp = list1[i]
            list1[i] = list1[n-j-1]
            list1[n-j-1] = tmp
            
print(list1)

# Задача 4. Товары
# В базе данных магазина вся необходимая информация по товарам делится на
# два словаря: первый отвечает за коды товаров, второй — за списки количества
# разнообразных товаров на складе:

goods = {
'Лампа': '12345',
'Стол': '23456',
'Диван': '34567',
'Стул': '45678',
}

store = {
'12345': [
{'quantity': 27, 'price': 42},
],
'23456': [
{'quantity': 22, 'price': 510},
{'quantity': 32, 'price': 520},
],
'34567': [
{'quantity': 2, 'price': 1200},
{'quantity': 1, 'price': 1150},
],
'45678': [
{'quantity': 50, 'price': 100},
{'quantity': 12, 'price': 95},
{'quantity': 43, 'price': 97},
],
}

# Каждая запись второго словаря отображает, сколько и по какой цене
# закупалось товаров. Цена указана за одну штуку.
# Напишите программу, которая рассчитывает общую стоимость позиций для
# каждого товара на складе и выводит эту информацию на экран.
# Результат работы программы:
# Лампа — 27 штук, стоимость 1134 рубля.
# Стол — 54 штуки, стоимость 27 860 рублей.
# Диван — 3 штуки, стоимость 3550 рублей.
# Стул — 105 штук, стоимость 10 311 рублей.

for i in goods:
    n = goods[i]
    result_price = 0
    count = 0
    for j in store[n]:
        result_price += j['quantity'] * j['price']
        count += j['quantity']
        
    print(f'{i} {count} шт. Цена {result_price} руб.')
    
# Задача 5. Пицца
# В базе данных интернет-магазина PizzaTime хранятся сведения о том, кто, что и
# сколько заказывал у них в определённый период. Вам нужно структурировать
# эту информацию и определить, сколько всего пицц купил каждый заказчик.
# На вход в программу подаётся N заказов. Каждый заказ представляет собой
# строку вида «Покупатель — название пиццы — количество заказанных пицц».
# Реализуйте код, который выводит список покупателей и их заказов по
# алфавиту. Учитывайте, что один человек может заказать одну и ту же пиццу
# несколько раз.

       
orders_count = int(input("Введите количество заказов: "))

database = dict()

for i_order in range(orders_count):
    # Вводим заказ и разбиваем его на части
    customer, pizza_name, count = input('{} заказ: '.format(i_order + 1)).split()

    # Преобразуем количество в целое число
    count = int(count)
    # Если покупатель еще не добавлен в словарь
    if customer not in database:
        # Добавляем покупателя и начальную запись о пицце
        database[customer] = {pizza_name: count}
    else:
        # Если покупатель уже есть
        if pizza_name in database[customer]:
            # Если пицца уже была заказана ранее, увеличиваем количество
            database[customer][pizza_name] += count
        else:
            # Если пицца новая для этого покупателя, добавляем запись
            database[customer][pizza_name] = count
            # Сортируем список покупателей в алфавитном порядке и выводим информацию
for customer in sorted(database.keys()):
    print('{}:'.format(customer))
      # Сортируем пиццы по алфавиту и выводим информацию
    for pizza_name in sorted(database[customer].keys()):
        print(' {}: {}'.format(pizza_name, database[customer][pizza_name]))
          
       
                
              

              
                   
    
    

    
           
                
            
            
            
                
                
   








  
    
